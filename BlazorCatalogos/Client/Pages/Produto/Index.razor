@page "/produto"
@inject HttpClient  http
@inject NavigationManager navigation

@if (produtos == null)
{
    <p><em>Carregando...</em></p>
}
else if (produtos.Count == 0)
{
    <p><em>Não existem produtos cadastrados...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Produto</th>
                <th>Descrição</th>
                <th>Preço</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var produto in produtos)
            {
                <tr>
                    <td>@produto.Nome</td>
                    <td>@produto.Descricao</td>
                    <td>@produto.Preco</td>
                    <td><a class="btn btn-primary" href="produto/edit/@produto.ProdutoId">Editar</a> </td>
                    <td><a class="btn btn-danger" @onclick="@(()=> DeletarProduto(produto.ProdutoId))" style="color:white">Deletar</a> </td>
                </tr>
            }
        </tbody>
    </table>
}
<Confirma @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeletaConfirma">
    <div>Deseja realmente excluir este item?</div>
</Confirma>
<hr />
<hr />
<div>
    <a class="btn btn-success" href="produto/create">Novo Produto</a>
</div>

@code {

    public Confirma confirma;
    int codigoProduto;
    public List<Produto> produtos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CarregaProdutos();
    }

    public async Task CarregaProdutos()
    {
        produtos = await http.GetFromJsonAsync<List<Produto>>("/api/produto");
    }

    public void DeletarProduto(int produtoId)
    {
        confirma.Exibir();
        codigoProduto = produtoId;
    }
    void CancelaConfirma()
    {
        confirma.Ocultar();
    }
    async Task DeletaConfirma()
    {
        await http.DeleteAsync($"api/produto/{codigoProduto}");
        confirma.Ocultar();
        await CarregaProdutos();
    }
}