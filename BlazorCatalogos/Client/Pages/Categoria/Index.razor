@page "/categoria"
@inject HttpClient http


<h2>Categorias</h2> 
<div>
    <a class="btn btn-success" href="categoria/create">Nova Categoria</a>
</div>    
<br />
<div class="form-inline">
    <label class="sr-only" for="filter-name">Filtro</label>
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="nomeFiltro"
           placeholder="Filtrar pelo nome" />
    <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filtrar">
        Filtrar
    </button>
    <button type="button" class="btn btn-danger mb-2" @onclick="LimparFiltro">
        Limpar
    </button>
</div>
<br />

@if (categorias == null)
{
<p><em>Carregando...</em></p>
}
else if (categorias.Count == 0)
{
<p><em>Não existem categorias cadastradas!</em></p>
}
else
{
    //Exibir todas as categorias criando uma tabela Html
<table class="table">
    <thead>
        <tr>
            <th>Categoria</th>
            <th>Descrição</th>
            <th>Edita</th>
            <th>Deleta</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in categorias)
        {
        <tr>
            <td>@item.Nome</td>
            <td>@item.Descricao</td>            
            <td><a class="btn btn-primary" href="categoria/edit/@item.CategoriaId">Editar</a></td>            
            <td><a class="btn btn-danger" @onclick="@(()=> DeletarCategoria(item.CategoriaId))">Deletar</a></td>
        </tr>
        }
    </tbody>   
</table>
}
<Confirma @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeletaConfirma">
    <div>Deseja realmente excluir este item?</div>
</Confirma>
<hr />  
<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" paginaAtual="paginaAtual"
           Raio="2" PaginaSelecionada="PaginaSelecionada">

</Paginacao>

@code {

    public Confirma confirma;
    public int codigoCategoria;

    private int QuantidadeTotalPaginas;
    private int paginaAtual = 1;

    public string nomeFiltro = string.Empty;

    public List <Categoria> categorias { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CarregaCategorias();
    }

    public async Task CarregaCategorias(int pagina=1, int quantidadePorPagina=5)
    {
        //categorias = await http.GetFromJsonAsync<Categoria[]>("api/categoria");

        var httpResponse = await http.GetAsync($"api/categoria?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nome={nomeFiltro}");

        if (httpResponse.IsSuccessStatusCode)
        {
            QuantidadeTotalPaginas = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());

            var responseString = await httpResponse.Content.ReadAsStringAsync();

            categorias = JsonSerializer.Deserialize<List<Categoria>>(responseString,
                new JsonSerializerOptions()
                {
                    PropertyNameCaseInsensitive = true
                });
        }
    }

    public void DeletarCategoria(int categoriaId)
    {
        confirma.Exibir();
        codigoCategoria = categoriaId;
        //await http.DeleteAsync($"api/categoria/{categoriaId}");
        //await CarregaCategorias();
    }

    public async Task DeletaConfirma()
    {
        await http.DeleteAsync($"api/categoria/{codigoCategoria}");
        confirma.Ocultar();
        await CarregaCategorias();
    }
    public void CancelaConfirma()
    {
        confirma.Ocultar();
    }

    private async Task PaginaSelecionada(int pagina)
    {
        paginaAtual = pagina;
        await CarregaCategorias(pagina);
    }

    private async Task Filtrar()
    {
        paginaAtual = 1;
        await CarregaCategorias();
    }
    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        paginaAtual = 1;
        await CarregaCategorias();
    }
}
